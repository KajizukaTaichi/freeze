lang                    : program

program                 : statement_group+

statement_group         : statement ";"

?statement              : for_statement
                        | while_statement
                        | if_statement
                        | use_statement
                        | include_statement
                        | function_def
                        | unit_def
                        | return_statement
                        | try_statement
                        | comment_statement
                        | math_expr

for_statement           : "for" math_expr "to" math_expr skip_statement ":" program "end"

while_statement         : "while" math_expr ":" program "end"

if_statement            : "if" math_expr ":" program "end"

use_statement           : "use" name

include_statement       : "include" name

function_def            : ind "fn" name "(" arg_def ")" name ":" program "end"

unit_def                : "unit" name ":" program "end"

arg_def                 : argd_e*

argd_e                  : name ":" name ","

return_statement        : "return" math_expr

try_statement           : "try" program "catch" math_expr ":" program "end"

ind                     : ["ind"]

comment_statement       : "//" string

skip_statement          : ["skip" math_expr]

?math_expr              : assignment
                        | add_ca
                        | sub_ca
                        | mul_ca
                        | div_ca
                        | sur_ca
                        | ao_expr

assignment              : math_expr ":" name "=" ao_expr

add_ca                  : math_expr "+=" ao_expr

sub_ca                  : math_expr "-=" ao_expr

mul_ca                  : math_expr "*=" ao_expr

div_ca                  : math_expr "/=" ao_expr

sur_ca                  : math_expr "%=" ao_expr

?ao_expr                : and_expr
                        | or_expr
                        | ene_expr

and_expr                : ao_expr "and" ene_expr

or_expr                 : ao_expr "or" ene_expr

ene_expr                : eq
                        | neq
                        | gl_expr

eq                      : ene_expr "==" gl_expr

neq                     : ene_expr "!=" gl_expr

?gl_expr                : gt
                        | lt
                        | geq
                        | leq
                        | as_expr

gt                      : gl_expr ">" as_expr

lt                      : gl_expr "<" as_expr

geq                     : gl_expr ">=" as_expr

leq                     : gl_expr "<=" as_expr

?as_expr                : add
                        | sub
                        | md_expr

add                     : as_expr "+" md_expr

sub                     : as_expr "-" md_expr

?md_expr                : mul
                        | div
                        | sur
                        | base_expr

mul                     : md_expr "*" base_expr

div                     : md_expr "/" base_expr

sur                     : md_expr "%" base_expr

?base_expr              : number
                        | string
                        | name
                        | not_expr
                        | data_expr
                        | function_call
                        | variable_call

number                  : SIGNED_NUMBER

string                  : "\"" WORD "\""

name                    : CNAME

function_call           : name "(" arg_call ")"

variable_call           : "$" name

arg_call                : argc_e*

argc_e                  : math_expr ","

data_expr               : eexpr_

eexpr_                  : "(" math_expr ")"

%import common.WORD
%import common.CNAME
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS
